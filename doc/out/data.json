{
    "project": {},
    "files": {
        "../routers/authenticate.js": {
            "name": "../routers/authenticate.js",
            "modules": {},
            "classes": {
                "Authenticate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "../routers/message.js": {
            "name": "../routers/message.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "../routers/notification.js": {
            "name": "../routers/notification.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Authenticate": {
            "name": "Authenticate",
            "shortname": "Authenticate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "../routers/authenticate.js",
            "line": 1,
            "description": "Provides some methods related to any authentications"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "../routers/authenticate.js",
            "line": 19,
            "description": "Register a new user",
            "itemtype": "method",
            "name": "POST api/authenticate/register",
            "params": [
                {
                    "name": "fb",
                    "description": "If the registeration is with FB",
                    "type": "Boolean=false"
                },
                {
                    "name": "identity",
                    "description": "The user ID. If it's with FB, fb_id as identity",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "Password. If it's with FB, password will be generated by hash",
                    "type": "String=''"
                },
                {
                    "name": "name",
                    "description": "The displaying name",
                    "type": "String"
                },
                {
                    "name": "email",
                    "description": "The email",
                    "type": "String=''"
                },
                {
                    "name": "photo_path",
                    "description": "The photo path of user face photo",
                    "type": "String=''"
                }
            ],
            "return": {
                "description": "New created user object",
                "type": "JSON"
            },
            "class": "Authenticate"
        },
        {
            "file": "../routers/authenticate.js",
            "line": 90,
            "description": "Login",
            "itemtype": "method",
            "name": "GET api/authenticate/login",
            "params": [
                {
                    "name": "fb",
                    "description": "If the login is with FB",
                    "type": "Boolean=false"
                },
                {
                    "name": "identity",
                    "description": "The user ID. If it's with FB, fb_id as identity",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "Password. If it's with FB, password will be checked by hash",
                    "type": "String=''"
                }
            ],
            "return": {
                "description": "Token",
                "type": "JSON"
            },
            "example": [
                "\n<pre>\n{\n\tauthentication: 'success',\n\ttoken: result.token\n}\n</pre>",
                "\n<pre>\n{\n\tauthentication: 'fail',\n\ttoken: null\n}\n</pre>"
            ],
            "class": "Authenticate"
        },
        {
            "file": "../routers/authenticate.js",
            "line": 177,
            "description": "Token validation",
            "itemtype": "method",
            "name": "GET *?token=...",
            "params": [
                {
                    "name": "TOKEN",
                    "description": "",
                    "type": "String=''"
                }
            ],
            "return": {
                "description": "If failed, return JSON",
                "type": "JSON|Nothing"
            },
            "example": [
                "\n<pre>\n{\n\tauthentication: 'timeout',\n\terr: err\n}\n</pre>",
                "\n<pre>\n{\n\tauthentication: 'fail',\n}\n</pre>"
            ],
            "class": "Authenticate"
        },
        {
            "file": "../routers/message.js",
            "line": 168,
            "description": "use to update read/unread",
            "class": ""
        },
        {
            "file": "../routers/notification.js",
            "line": 106,
            "description": "use to update read/unread",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nuse to update read/unread",
            "line": " ../routers/message.js:168"
        },
        {
            "message": "Missing item type\nuse to update read/unread",
            "line": " ../routers/notification.js:106"
        }
    ]
}